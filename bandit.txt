Bandit0: 
Password: Bandit 0

Bandit 0 -> 1:
Cat readme    ----   shows an introduction with the password"

Bandit 1 -> 2:
cat -    -----   doesn't work because unix doesn't know you are referencing a file. Instead use
cat ./- 

Bandit 2 -> 3:
ls shows a file with spaces in the name. You must put quotes around the file name when using cat
cat "spaces in this file name"

Bandit 3 -> 4:
ls shows a directory called "inhere" but inhere appears empty. Ls -a shows some hidden files includuing the one with the password.

cd inhere
cat ...Hiding-From-You

Bandit 4 -> 5:
Opening each file in "inhere" with cat will show that only file07 is human readable. There is probably a better way to do this.
cat ./-file07

Bandit 5 -> 6:
 The find command gives the ability to find files of a specific size with -size and executable files with -executable.

find -size 1033c ! -executable   -----  tihs provides a file path which we can cat
cat ./inhere/maybehere07/.file2

Bandit 6 -> 7:
The find command has -user and -group to find files with a specific owner and group respectively. Combine that with -size to get
find / -user bandit7 -group bandit6 -size 33c   ----- the / means the search starts from the root directory so the whole server is searched

This should reveal a path which you can then cat to get the file
cat /var/lib/dpkg/info/bandit7.password

Bandit 7 -> 8:
Grep shows you the whole line which has the pattern you want
grep "millionth" data.txt 

Bandit 8 -> 9:
The uniq command with the flag -u only shows unique file lines. We can sort the file with sort first so that it works properly. 
sort data.txt | uniq -u

Bandit 9 -> 10:
Use grep -a to show the whole file and highlight any instances of multiple ='s. There are only a few so it is easy to find the password
grep -a "===" data.txt

Bandit 10 -> 11:
Since the data is encoded using base64, we can use base64 -d to decode it
base64 -d data.txt

Bandit 11 -> 12:
We can use the tr (translate) command to decode the caesar cipher. To do so we need to send all characters 13 positions over. We can do this by mapping a-z to n-z+a-l for both upper and lower case characters
cat data.txt | tr [a-z] [n-za-m] | tr [A-Z] [N-ZA-M]

